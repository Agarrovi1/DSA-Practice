struct Vertex<T:Hashable>: Hashable, CustomStringConvertible {
    
    var data: T
    var description: String {
        return "\(data)"
    }
    
}
​
struct Edge<T:Hashable>: Hashable {
    var source: Vertex<T>
    var destination: Vertex<T>
    let weight: Double?
    
}
​
enum EdgeType {
    case directed, undirected
}
​
protocol Graph {
    associatedtype Element: Hashable
    var description: CustomStringConvertible { get }
    
    func createVertex(data: Element) -> Vertex<Element>
    func add(_ type: EdgeType, from source: Vertex<Element>, to destination: Vertex<Element>, weight: Double?)
    func weight(from source: Vertex<Element>, to destination: Vertex<Element>) -> Double?
    func edges(from source:Vertex<Element>) -> [Edge<Element>]?
}
​
​
class AdjacencyList<T: Hashable>: Graph {
    typealias Element = T
    
    var adjancencyDictionary: [Vertex<T> : [Edge<T>]] = [:]
    
    func createVertex(data: T) -> Vertex<T> {
        let vertex = Vertex(data: data)
        if adjancencyDictionary[vertex] == nil {
            adjancencyDictionary[vertex] = []
        }
        
        return vertex
    }
    
    
    func addDirectedEdge(from source: Vertex<Element>, to destination: Vertex<Element>, weight: Double?) {
        let edge = Edge(source: source, destination: destination, weight: weight)
        adjancencyDictionary[source]?.append(edge)
    }
    
    func addUndirectedEdge(vertices: (Vertex<Element>, Vertex<Element>), weight: Double?) {
        let (source, destination) = vertices
        addDirectedEdge(from: source, to: destination, weight: weight)
        addDirectedEdge(from: destination, to: source, weight: weight)
    }
    
    
    func add(_ type: EdgeType, from source: Vertex<T>, to destination: Vertex<T>, weight: Double?) {
        switch type {
        case .directed:
            addDirectedEdge(from: source, to: destination, weight: weight)
        case .undirected:
            addUndirectedEdge(vertices: (source,destination), weight: weight)
        }
    }
    
    func weight(from source: Vertex<T>, to destination: Vertex<T>) -> Double? {
        guard let edges = adjancencyDictionary[source] else { return nil }
        
        for edge in edges {
            if edge.destination == destination {
                return edge.weight
            }
        }
        return nil
    }
    
    
    func edges(from source: Vertex<T>) -> [Edge<T>]? {
        return adjancencyDictionary[source]
    }
    
    public var description: CustomStringConvertible {
         var result = " "
         for (vertex, edges) in adjancencyDictionary {
           var edgeString = ""
           for (index, edge) in edges.enumerated() {
             if index != edges.count - 1 {
               edgeString.append("\(edge.destination), ")
             } else {
               edgeString.append("\(edge.destination)")
             }
           }
           result.append("\(vertex) ---> [ \(edgeString) ] \n ")
         }
         return result
       }
    
}

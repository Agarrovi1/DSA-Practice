func validate(data: [[Int]]) -> String {
    var rowDict = [Int:[Int]]()
    var columnDict = [Int:[Int]]()
    var boxDict = [Int:[Int]]()
    for input in data {
        let row = input[0]
        let column = input[1]
        let value = input[2]

        if let nums = rowDict[row] {
            if nums.contains(value) {
                return "WRONG INPUT"
            } else {
                rowDict[row] = nums + [value]
            }
        } else {
            rowDict[row] = [value]
        }
        
        if let nums = columnDict[column] {
            if nums.contains(value) {
                return "WRONG INPUT"
            } else {
                columnDict[column] = nums + [value]
            }
        } else {
            columnDict[column] = [value]
        }
        
        let boxNumber = findBox(input: input)
        if let nums = boxDict[boxNumber] {
            if nums.contains(value) {
                return "WRONG INPUT"
            } else {
                boxDict[boxNumber] = nums + [value]
            }
        } else {
            boxDict[boxNumber] = [value]
        }
        
    }
    return "OK"
}

func findBox(input: [Int]) -> Int {
    let row = input[0]
    let column = input[1]
    
    switch row {
    case 1...3:
        switch column {
        case 1...3:
            return 1
        case 4...6:
            return 2
        default:
            return 3
        }
    case 4...6:
        switch column {
        case 1...3:
            return 4
        case 4...6:
            return 5
        default:
            return 6
        }
    default:
        switch column {
        case 1...3:
            return 7
        case 4...6:
            return 8
        default:
            return 9
        }
    }
}
/*
 1 2 3
 4 5 6
 7 8 9
 */

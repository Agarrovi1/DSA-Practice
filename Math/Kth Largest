class KthLargest {
​
    var nums: [Int]
    var index: Int
    
    init(_ k: Int, _ nums: [Int]) {
        self.index = k
        self.nums = nums.sorted(by:<)
    }
    
    func add(_ val: Int) -> Int {
        if nums.count == 0 {nums.append(val)}
        
        let indexToPlace = getIndex(val, nums, 0, nums.count - 1)
        nums.insert(val, at: indexToPlace)
        return nums[nums.count - index]
    }
}
​
​
func  getIndex(_ val: Int, _ nums: [Int], _  lowerIndex: Int, _ upperIndex: Int) -> Int {
    let midIndex = (lowerIndex + upperIndex) / 2
    if lowerIndex == upperIndex {
        if val < nums[lowerIndex] {
            return lowerIndex
        } else {
            return lowerIndex + 1
        }
    }
    
    if val > nums[midIndex] {
        return getIndex(val, nums, midIndex + 1, upperIndex)
    } else if val == nums[midIndex] {
        return midIndex
    } else {
        return getIndex(val, nums, lowerIndex, midIndex)
    }
    
}
​
​
let thing = KthLargest(3, [4,5,8,2])
​
thing.add(3)
thing.add(5)
thing.add(10)
thing.add(9)
thing.add(4)

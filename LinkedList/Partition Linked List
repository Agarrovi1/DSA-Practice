Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

Example:

Input: head = 1->4->3->2->5->2, x = 3
Output: 1->2->2->4->3->5



func partition(_ head: ListNode?, _ x: Int) -> ListNode? {
        var firstLess: ListNode?
        var lessHead: ListNode?
        var firstMore: ListNode?
        var moreHead: ListNode?
        
        
        var currentNode = head
        while currentNode != nil {
            if let val = currentNode?.val {
                if val < x {
                    if let less = lessHead {
                        lessHead?.next = currentNode
                        lessHead = lessHead?.next
                    } else {
                        lessHead = currentNode
                        firstLess = lessHead
                    }
                } else {
                    if let more = moreHead {
                        moreHead?.next = currentNode
                        moreHead = moreHead?.next
                    } else {
                        moreHead = currentNode
                        firstMore = moreHead
                    }
                }
            }
            currentNode = currentNode?.next
        }
        if let lh = lessHead {
            lessHead?.next = firstMore
            moreHead?.next = nil
            return firstLess
        }
        return head
    }

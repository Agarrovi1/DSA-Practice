Suduko is a logic-based number-placement puzzle. 
The objective is to fill a 9×9 grid with digits so that each column, each row,
and each of the nine 3×3 subgrids that compose the grid contains all of the digits from 1 to 9.

In this problem, you will be given a set of input data for a partially filled sudoku puzzle.
Your task is to determine if it is a valid input. Print "OK" if input is valid. Otherwise print "WRONG INPUT".

Note that an input is valid if no rows, columns, or subgrids contain duplicates.


func validate(data: [[Int]]) -> String {
    var rowDict = [Int:[Int]]()
    var columnDict = [Int:[Int]]()
    var boxDict = [Int:[Int]]()
    for input in data {
        let row = input[0]
        let column = input[1]
        let value = input[2]

        if let nums = rowDict[row] {
            if nums.contains(value) {
                return "WRONG INPUT"
            } else {
                rowDict[row] = nums + [value]
            }
        } else {
            rowDict[row] = [value]
        }
        
        if let nums = columnDict[column] {
            if nums.contains(value) {
                return "WRONG INPUT"
            } else {
                columnDict[column] = nums + [value]
            }
        } else {
            columnDict[column] = [value]
        }
        
        let boxNumber = findBox(input: input)
        if let nums = boxDict[boxNumber] {
            if nums.contains(value) {
                return "WRONG INPUT"
            } else {
                boxDict[boxNumber] = nums + [value]
            }
        } else {
            boxDict[boxNumber] = [value]
        }
        
    }
    return "OK"
}

func findBox(input: [Int]) -> Int {
    let row = input[0]
    let column = input[1]
    
    switch row {
    case 1...3:
        switch column {
        case 1...3:
            return 1
        case 4...6:
            return 2
        default:
            return 3
        }
    case 4...6:
        switch column {
        case 1...3:
            return 4
        case 4...6:
            return 5
        default:
            return 6
        }
    default:
        switch column {
        case 1...3:
            return 7
        case 4...6:
            return 8
        default:
            return 9
        }
    }
}
/*
 1 2 3
 4 5 6
 7 8 9
 */
 
 
 //
 func validateMoves(data: [[Int]]) -> Bool {
    var gameBoard = Array(repeating: Array(repeating: 0, count: 9), count: 9)
    for arr in data {
        print(arr)
        let rowIndex = arr[0] - 1
        let columnIndex = arr[1] - 1
        let value = arr[2]
        for i in 0...8 {
            //row
            if gameBoard[rowIndex][i] == value {return false}
            //column
            if gameBoard[i][columnIndex] == value {return false}
        }
        //grid
        let rowRangeStart = (rowIndex / 3) * 3
        let columnRangeStart = (columnIndex / 3) * 3
        for i in rowRangeStart...(rowRangeStart + 2) {
            for j in columnRangeStart...(columnRangeStart + 2) {
                if gameBoard[i][j] ==  value {
                    return false
                }
            }
        }
        gameBoard[rowIndex][columnIndex] = value
    }
    return true
}

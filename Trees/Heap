Like a binary tree
priority on root node maxHeap -> root node has highest value
minHeap -> root has lowest value
uses array and clever math

for any node where i is the index (0 count)
leftChildIndex -> 2i + 1
rightChildIndex -> 2i +2

struct Heap<T> {
    var elements: [T]
    let priorityFunction: (T,T) -> Bool
    
    var isEmpty: Bool {
        return elements.isEmpty
    }
    var count: Int {
        return elements.count
    }
    
    func isRoot(_ index: Int) -> Bool {
        return index == 0
    }
    func leftChildIndex(of index: Int) -> Int {
        return (2 * index) + 1
    }
    func rightChildIndex(of index: Int) -> Int {
        return (2 * index) + 2
    }
    func parentIndex(of index: Int) -> Int {
        return (index - 1) / 2
    }
    func isHigherPriority(at firstIndex: Int, than secondIndex: Int) -> Bool {
        return priorityFunction(elements[firstIndex],elements[secondIndex])
    }
    func highestPriorityIndex(of parentIndex: Int, and childIndex: Int) -> Int {
        guard childIndex < count && isHigherPriority(at: childIndex, than: parentIndex) else {
            return parentIndex
        }
        return childIndex
    }
    func highestPriorityIndex(for parent: Int) -> Int {
        return highestPriorityIndex(of: highestPriorityIndex(of: parent, and: leftChildIndex(of: parent)), and: rightChildIndex(of: parent))
    }
    mutating func swapElements(at firstIndex: Int, with secondIndex: Int) {
        guard firstIndex != secondIndex else {return}
        elements.swapAt(firstIndex, secondIndex)
    }
    mutating func enque(_ element: T) {
        elements.append(element)
        siftUp(elementAtIndex: count - 1)
    }
    mutating func siftUp(elementAtIndex: Int) {
        let parent = parentIndex(of: elementAtIndex)
        guard !isRoot(elementAtIndex), isHigherPriority(at: elementAtIndex, than: parent) else {
            return
        }
        swapElements(at: elementAtIndex, with: parent)
        siftUp(elementAtIndex: parent)
    }
    mutating func deque() -> T? {
        guard !isEmpty else {
            return nil
        }
        swapElements(at: 0, with: count - 1)
        let element = elements.removeLast()
        if !isEmpty {
            siftDown(elementAtIndex: 0)
        }
        return element
    }
    mutating func siftDown(elementAtIndex: Int) {
        let childIndex = highestPriorityIndex(for: elementAtIndex)
        if elementAtIndex == childIndex {
            return
        }
        swapElements(at: elementAtIndex, with: childIndex)
        siftDown(elementAtIndex: childIndex)
    }
    init(elements: [T] = [], priorityFunction: @escaping (T,T) -> Bool) {
        self.elements = elements
        self.priorityFunction = priorityFunction
        buildHeap()
    }
    mutating func buildHeap() {
        for index in (0..<count / 2).reversed() {
            siftDown(elementAtIndex: index)
        }
    }
}
